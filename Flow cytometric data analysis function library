library(flowCore)
library(flowClust)
library(flowTrans)

## Generic function for pulling in FCS files and returning a list of flow data frames
## Default behavior: Imports all FCS files found in the working directory
## Optional arguments:
## File name - Will only import a single file that matches the provided string
## File path - Will import files from the file path designated by the provided string
get.FCS<-function(fileName, filePath) {
  
  flowFrameList<-list()
  
  if(missing(filePath) == TRUE){
    if (missing(fileName) == TRUE) {
      fileNames<-list.files(pattern = ".fcs$", ignore.case = TRUE)
    }
    else {
      fileNames<-list.files(pattern = fileName)
      if (length(fileNames) == 0L) {
        stop(paste("File name not found in", getwd()))
      }
    }
    
    for (i in 1:length(fileNames)) {
      flowFrameList[[i]]<-read.FCS(fileNames[[i]],transformation = FALSE)
      flowFrameList[[i]]<-as.data.frame(exprs(flowFrameList[[i]]))
    }
  }
  
  else {
    if (missing(fileName) == TRUE) {
      fileNames<-list.files(path = filePath, pattern = ".fcs$", ignore.case = TRUE)
      if (length(fileNames) == 0L) {
        stop(paste("File name not found in", filePath))
      }
    }
    else {
      fileNames<-list.files(path = filePath, pattern = fileName)
      if (length(fileNames) == 0L) {
        stop("File name not found, or unable to path correctly")
      }
    }
    
    currentWD<-getwd()
    setwd(filePath)
    if (getwd() == currentWD) {
      stop("Unable to path correctly")
    }
    
    for (i in 1:length(fileNames)) {
      flowFrameList[[i]]<-read.FCS(fileNames[[i]],transformation = FALSE)
      flowFrameList[[i]]<-as.data.frame(exprs(flowFrameList[[i]]))
    }
    
    setwd(currentWD)
  }
  
  ## Loop to parse column names of all imported FCS files to a standardized,
  ## no punctuation format
  for(i in 1:length(flowFrameList)) {
    
    colNum<-ncol(flowFrameList[[i]])
    
    for (k in 1:colNum) {
      
      flowColumnName<-colnames(flowFrameList[[i]][k])
      
      flowColumnName<-sub("^<","",flowColumnName)
      flowColumnName<-sub("-(A|A>)","",flowColumnName)
      flowColumnName<-gsub("[^[:alnum:]]", "", flowColumnName)
      flowColumnName<-toupper(flowColumnName)
      print(flowColumnName)
      colnames(flowFrameList[[i]])[k]<-flowColumnName
      
    }
    
  }
  
  return(flowFrameList)
  
}

## Function to read in parameter labels as a tab delimited file from the working directory
## Returns a data frame containing label information
## Table format (use these as column headers with identical casing and spelling) --
## Column 1: "Fluorophore"
## Column 2: "Marker"
##
## The parameter labels themselves require no specific order/punctuation/casing for fluorophores or markers,
## but the fluorophore names should match those applied to the FCS files being worked with
get.ParameterLabels<-function(parameterLabelsFileName) {
  
  parameterLabels<-as.data.frame(read.table(parameterLabelsFileName, header = TRUE, stringsAsFactors = FALSE))
  
  ## Remove punctuation from parameter labels and convert to uppercase
  for (i in 1:nrow(parameterLabels)) {
    parameterLabels$Fluorophore[i]<-gsub("[^[:alnum:]]", "", as.character(parameterLabels$Fluorophore[i]))
    parameterLabels$Fluorophore[i]<-toupper(parameterLabels$Fluorophore[i])
  }
  
  return(parameterLabels)
  
}

## Function to replace fluorophore labels in a flow data frame with marker labels,
## using a provided parameter label table read in by the get.ParameterLabels() function
##
## Optional arguments: keepFluoro -- (boolean, default = FALSE) 
## sepChar -- subargument of keepFluoro (string, default = "-")
## If keepFluoro is TRUE, appends the marker label to the fluoroscence label, seperated
## by the character specificed in the sepChar argument
flowFrame.MarkerApply<- function(flowDataFrame, parameterLabels, keepFluoro = FALSE, sepChar = "-") {
  
  if (missing(parameterLabels) == TRUE) {
    stop("No parameter label argument provided")
  }
  
  if (is.null(parameterLabels) == TRUE) {
    stop("Parameter label is null")
  }
  
  if (is.null(flowDataFrame) == TRUE) {
    stop("Flow data frame is null")
  }
  
  ## For each column in data frame containing flow data:
  for(i in 1:ncol(flowDataFrame)) {
    
    ## Read column name
    flow_column_name<-colnames(flowDataFrame[i])  
    
    ## If column name = FSC, SSC, or Time, skip it
    if(flow_column_name == "FSC" | flow_column_name == "SSC" | flow_column_name == "Time") {
      next()
    }
    
    else {
      
      ## Iteratively compare the column name to the fluorescence parameters in the 
      ## provided label file
      ##
      ## If matched, rename the column of the flow data frame to marker label
      
      Switch<-FALSE
      
      for(n in 1:length(parameterLabels$Fluorophore)){
        
        if(flow_column_name == parameterLabels$Fluorophore[n]) {
          
          if(keepFluoro == FALSE) {
            colnames(flowDataFrame)[i]<-as.character(parameterLabels$Marker[n])
            Switch<-TRUE
          }
          
          if(keepFluoro == TRUE){
            if(sepChar == "-") {
              colnames(flowDataFrame)[i]<-paste(as.character(parameterLabels$Marker[n]), flow_column_name, sep = "-")
              Switch<-TRUE
            }
            else {
              colnames(flowDataFrame)[i]<-paste(as.character(parameterLabels$Marker[n]), flow_column_name, sep = sepChar)
              Switch<-TRUE
            }
          }
        }
      }
      
      if(Switch == FALSE) {
        stop(paste("Could not assign", flow_column_name, "to a marker, check parameter table"))
      }
      
    } 
    
  }
  return(flowDataFrame)
}

## Function to remove columns or specific elements that meet a condition from a flow frame
## Arguments:
## flowDataFrame - Data frame containing flow data to be manipulated
## parameter - String matching a column label of the flow frame
##
## Optional arguments:
## upper/lowerBound - Numeric(s) defining an allowed range of values for elements in flowDataFrame$parameter
## If a value falls outside this range, the entire row (cell) is removed from the flow frame
flowFrame.Prune<-function(flowDataFrame, parameter, upperBound = NULL, lowerBound = NULL) {
  
  parameter<-toupper(parameter)
  
  ## Iterate through the column names of the passed flow frame, looking for "parameter"
  Switch<-FALSE
  colNum<-ncol(flowDataFrame)
  columnNames<-toupper(colnames(flowDataFrame))
  
  for(colI in 1:colNum) {
    
    ## If a match is found
    if (columnNames[colI] == parameter) {
      
      Switch<-TRUE

      ## and if no upper/lower bound arguments were supplied
      if(is.null(upperBound) == TRUE & is.null(lowerBound) == TRUE) {

        ## remove that column 
        flowDataFrame<-flowDataFrame[-colI]
        break()
      }
      
      else {

        rowCount<-nrow(flowDataFrame[colI])
        colValues<-as.vector(flowDataFrame[,colI])
        rowIndexVector<-NULL
        
        ## If an upperbound and lowerbound argument were passed
        if(is.null(upperBound) == FALSE & is.null(lowerBound) == FALSE) {
          
          cond<-c(colValues > upperBound | colValues < lowerBound)

          ## For each element in that column of the flow frame
          for(rowI in 1:rowCount){
            
            ## if the element value is above the upper or below the lower bounds, 
            ## add the row index of that value (cell) to a vector
            if(cond[rowI]){
              rowIndexVector<-c(rowIndexVector, rowI)
            }
          }
          
          ## Remove the cells matching the row indices from the flow frame
          flowDataFrame<-flowDataFrame[-rowIndexVector,]

          ## If the previous block of code executed, no need to run the remaining
          break()
        }
        
        else {

          if(is.null(upperBound) == FALSE) {
              
              cond<-c(colValues > upperBound)
              
              for(rowI in 1:rowCount){
                if(cond[rowI]){
                  rowIndexVector<-c(rowIndexVector, rowI)
                }
              }
              flowDataFrame<-flowDataFrame[-rowIndexVector,]
              break()
            }

          if(is.null(lowerBound) == FALSE) {
            
            cond<-c(colValues < lowerBound)
            
            for(rowI in 1:rowCount){
              if(cond[rowI]){
                rowIndexVector<-c(rowIndexVector, rowI)
              }
            }
            flowDataFrame<-flowDataFrame[-rowIndexVector,]
            break()
          }
        }
      }
    }
  }
  if (Switch == FALSE) {
    stop(paste(as.character(parameter), "parameter not found"))
  }
  return(flowDataFrame)
}

## Simple function applying flowFrame.Prune to all elements of a list of flow data frames
## Same arguments as flowFrame.Prune
flowList.Prune<-function(flowList, parameter, upperBound = NULL, lowerBound = NULL) {
  
  for(i in 1:length(flowList)) {
    flowList[[i]]<-flowFrame.Prune(flowList[[i]], parameter, upperBound, lowerBound)
  }
  
  return(flowList)
  
}
