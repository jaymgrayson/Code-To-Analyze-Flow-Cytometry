library(flowCore)
library(flowClust)
library(flowTrans)

## Generic function for pulling in FCS files and returning a list of flow data frames
## Default behavior: Imports all FCS files found in the working directory
## Optional arguments:
## File name - Will only import a single file that matches the provided string
## File path - Will import files from the file path designated by the provided string
get.FCS<-function(fileName, filePath) {
  
  flowFrameList<-list()
  
  if(missing(filePath) == TRUE){
    if (missing(fileName) == TRUE) {
      fileNames<-list.files(pattern = ".fcs$", ignore.case = TRUE)
    }
    else {
      fileNames<-list.files(pattern = fileName)
      if (length(fileNames) == 0L) {
        stop(paste("File name not found in", getwd()))
      }
    }
    
    for (i in 1:length(fileNames)) {
      flowFrameList[[i]]<-read.FCS(fileNames[[i]],transformation = FALSE)
      flowFrameList[[i]]<-as.data.frame(exprs(flowFrameList[[i]]))
      names(flowFrameList)[[i]]<-gsub(".fcs","",fileNames[[i]])
    }
  }
  
  else {
    if (missing(fileName) == TRUE) {
      fileNames<-list.files(path = filePath, pattern = ".fcs$", ignore.case = TRUE)
      if (length(fileNames) == 0L) {
        stop(paste("File name not found in", filePath))
      }
    }
    else {
      fileNames<-list.files(path = filePath, pattern = fileName)
      if (length(fileNames) == 0L) {
        stop("File name not found, or unable to path correctly")
      }
    }
    
    currentWD<-getwd()
    setwd(filePath)
    if (getwd() == currentWD) {
      stop("Unable to path correctly")
    }
    
    for (i in 1:length(fileNames)) {
      flowFrameList[[i]]<-read.FCS(fileNames[[i]],transformation = FALSE)
      flowFrameList[[i]]<-as.data.frame(exprs(flowFrameList[[i]]))
      names(flowFrameList)[[i]]<-gsub(".fcs","",fileNames[[i]])
    }
    
    setwd(currentWD)
  }
  
  ## Parse column names of all incoming FCS files to a standardized,
  ## no punctuation format
  for(i in 1:length(flowFrameList)) {
    
    colNum<-ncol(flowFrameList[[i]])
    
    for (k in 1:colNum) {
      
      flowColumnName<-colnames(flowFrameList[[i]][k])
      
      flowColumnName<-sub("^<","",flowColumnName)
      flowColumnName<-sub("-(A|A>)","",flowColumnName)
      flowColumnName<-gsub("[^[:alnum:]]", "", flowColumnName)
      flowColumnName<-toupper(flowColumnName)
      colnames(flowFrameList[[i]])[k]<-flowColumnName
      
    }
    
  }
  
  return(flowFrameList)
  
}

## Function to read in parameter information as a tab delimited file from the working directory
## Returns a data frame containing parameter labels and optionally, parameter bounds
## Table format (use these as column headers with identical spelling) --
## Column 1: "Fluorophore"
## Column 2: "Marker"
## OPTIONAL column 3: "UpperBound"
## OPTIONAL column 4: "LowerBound"
##
## Fill empty cells (e.g., marker value for FSC, or no argument for upper/lower bound) with "NA"
##
## The parameter labels themselves require no specific order/punctuation/casing for fluorophores or markers,
## but the fluorophore names should match those applied to the FCS files being worked with
##
## Upper and LowerBound represent logicial arguments for values to exclude using the 
## flowFrame.Prune() function with the optional fromTable argument--
## Entering 0 and 0 for both represents deletion of parameter
##
## This function creates a parameter information matrix titled "paramInfo" in the global environment, 
## rather than returning the matrix. This allows other functions to access it without having
## to reference it as an argument
get.Parameters<-function(parameterTableFileName) {
  
  parameters<-as.data.frame(read.table(parameterTableFileName, header = TRUE, stringsAsFactors = FALSE, na.strings = "NA", fill = TRUE))
 
   # Parse all column titles to standardized format
  for (i in 1:ncol(parameters)) {
    colnames(parameters)[i]<-gsub("[^[:alnum:]]", "", colnames(parameters)[i])
    colnames(parameters)[i]<-toupper(colnames(parameters)[i])
  }
  
  # Remove punctuation from parameter labels and convert to uppercase
  for (i in 1:nrow(parameters)) {
    parameters$FLUOROPHORE[i]<-gsub("[^[:alnum:]]", "", as.character(parameters$FLUOROPHORE[i]))
    parameters$FLUOROPHORE[i]<-toupper(parameters$FLUOROPHORE[i])
    parameters$MARKER[i]<-gsub("[^[:alnum:]]", "", as.character(parameters$MARKER[i]))
    parameters$MARKER[i]<-toupper(parameters$MARKER[i])
  }

  
  assign("paramInfo", parameters, envir = globalenv())
}

## Function to replace fluorophore labels in a flow object with marker labels,
## using a provided parameter table read in by the get.Parameters() function
##
## Optional arguments: keepFluoro -- (boolean, default = FALSE) 
## sepChar -- subargument of keepFluoro (string, default = "-")
## If keepFluoro is TRUE, appends the marker label to the fluoroscence label, seperated
## by the character specificed in the sepChar argument
flow.MarkerApply<- function(flowDataFrameOrList, keepFluoro = FALSE, sepChar = "-") {
  flowFrame.MarkerApply<- function(flowDataFrame = flowDataFrameOrList, keepFluoro, sepChar) {
    if (exists("paramInfo") == FALSE) {
      stop("No parameter table found")
    }
    
    if (is.null(paramInfo) == TRUE) {
      stop("Parameter table is null")
    }
    
    if (is.null(flowDataFrame) == TRUE) {
      stop("Flow object is null")
    }
    
    ## For each column in data frame containing flow data:
    for(i in 1:ncol(flowDataFrame)) {
      
      ## Read column name
      flow_column_name<-colnames(flowDataFrame[i])  
      
      ## If column name = FSC, SSC, or Time, skip it
      if(flow_column_name == "FSC" | flow_column_name == "SSC" | flow_column_name == "TIME") {
        next()
      }
      
      else {
        
        ## Iteratively compare the column name to the fluorescence parameters in the 
        ## provided label file
        ##
        ## If matched, rename the column of the flow data frame to marker label
        
        Switch<-FALSE
        
        for(n in 1:length(paramInfo$FLUOROPHORE)){
          
          if(flow_column_name == paramInfo$FLUOROPHORE[n]) {
  
            if(keepFluoro == FALSE) {
              colnames(flowDataFrame)[i]<-as.character(paramInfo$MARKER[n])
              Switch<-TRUE
            }
            
            if(keepFluoro == TRUE){
              if(sepChar == "-") {
                colnames(flowDataFrame)[i]<-paste(as.character(paramInfo$MARKER[n]), flow_column_name, sep = "-")
                Switch<-TRUE
              }
              else {
                colnames(flowDataFrame)[i]<-paste(as.character(paramInfo$MARKER[n]), flow_column_name, sep = sepChar)
                Switch<-TRUE
              }
            }
          }
        }
        
        if(Switch == FALSE) {
          warning(paste("Unable to assign", flow_column_name, "to a marker, check parameter table"))
        }
        
      } 
      
    }
    return(flowDataFrame)
  }
  
  if(class(flowDataFrameOrList) == "data.frame") {
    return(flowFrame.MarkerApply(flowDataFrameOrList, keepFluoro, sepChar))
  }
  
  if(class(flowDataFrameOrList) == "list") {
    flowList<-as.list(NULL)
    for(i in 1:length(flowDataFrameOrList)) {
      flowList[[i]]<-flowFrame.MarkerApply(flowDataFrameOrList[[i]], keepFluoro, sepChar)
      names(flowList)[[i]]<-names(flowDataFrameOrList)[[i]]
    }
    return(flowList)
  }
}

## Function to remove columns or specific elements that meet a condition from a flow object
## Arguments:
## flowDataFrameOrList - Data frame or list of data frames containing flow data to be manipulated
## parameter - String matching a column label of the flow frame
##
## Optional arguments:
## upper/lowerBound - Numeric(s) defining an allowed range of values for elements in flowDataFrame$parameter
## If a value falls outside this range, the entire row (cell) is removed from the flow frame
##
## fromTable - Boolean indicating whether or not the function should look in the parameter table
## for upper/lower bound arguments. If true, ignores provided parameter, upperBound, and lowerBound
## arguments (all the logic is in the table)
## This optional argument will not work without first calling the get.Parameters() function
flow.Prune<-function(flowDataFrameOrList, parameter, upperBound = NULL, lowerBound = NULL, fromTable = FALSE) {
  
  ## flowFrame.Prune() is defined here so it can be called by flow.Prune() in a way that makes sense given
  ## the data type the function is passed
  flowFrame.Prune<-function(flowDataFrame = flowDataFrameOrList, parameter, upperBound, lowerBound, fromTable) {
    
  ## If fromTable argument is true, the parameter label matrix exists, it's not null, 
  ## AND it has either an upperbound or lowerbound column..
    if (fromTable) {
      if(!exists("paramInfo")) {
      stop("Parameter table not found-- call get.Parameters()")
      }
      if(is.null(paramInfo)) {
      stop("Parameter table is null")
      }
      if(!"UPPERBOUND" %in% colnames(paramInfo) & !"LOWERBOUND" %in% colnames(paramInfo)){
      stop("No upper or lowerbounds found in parameter table")
      }
      
      ## For each parameter in the table..
      for (i in 1:nrow(paramInfo)) {
        
        Switch<-FALSE
        
        ## Iterate through each column of the flow data frame..
        for (k in 1:ncol(flowDataFrame)) {
          
          fluoroLabel<-paramInfo$FLUOROPHORE[i]
          markerLabel<-paramInfo$MARKER[i]
          Upper<-paramInfo$UPPERBOUND[i]
          Lower<-paramInfo$LOWERBOUND[i]
          
          ## Until a label match is found
          if (fluoroLabel == colnames(flowDataFrame[k]) | (!is.na(markerLabel) & markerLabel == colnames(flowDataFrame[k])) | (!is.na(markerLabel) & paste(markerLabel,"-",fluoroLabel, sep = "") == colnames(flowDataFrame[k]))){
            Switch<-TRUE
            
            rowCount<-nrow(flowDataFrame[k])
            colValues<-as.vector(flowDataFrame[,k])
            rowIndexVector<-NULL 
            
            ## If 0,0 for upper/lower bound, delete column
            if(!is.na(Upper) & !is.na(Lower) & Upper == 0 & Lower == 0) {
              flowDataFrame<-flowDataFrame[-k]
              break()
            }
            
            ## If both upper and lower bound provided..
            if(!is.na(Upper) & !is.na(Lower)) {
              
              ## Generate a logical vector, based on provided arguments, 
              ## for each value in flow frame
              cond<-c(colValues > Upper | colValues < Lower)
              
              ## For each element in that column of the flow frame
              for(rowI in 1:rowCount){
                
                ## if the element value is above the upper or below the lower bounds, 
                ## add the row index of that value (cell) to a vector
                if(cond[rowI]){
                  rowIndexVector<-c(rowIndexVector, rowI)
                }
              }
              
              ## Use the index vector to delete cells from flow frame
              ## that fall out of described bounds
              if(!is.null(rowIndexVector)) {
                flowDataFrame<-flowDataFrame[-rowIndexVector,]
                break()
              }
            }
            
            if(!is.na(Upper) & is.na(Lower)) {
              
              cond<-c(colValues > Upper)

              for(rowI in 1:rowCount){
                if(cond[rowI]){
                  rowIndexVector<-c(rowIndexVector, rowI)
                }
              }
              if(!is.null(rowIndexVector)) {
                flowDataFrame<-flowDataFrame[-rowIndexVector,]
                break()
              }
            }
            
            if(is.na(Upper) & !is.na(Lower)) {
              
              cond<-c(colValues < Lower)
              for(rowI in 1:rowCount){
                if(cond[rowI]){
                  rowIndexVector<-c(rowIndexVector, rowI)
                }
              }
              
              if(!is.null(rowIndexVector)) {
                flowDataFrame<-flowDataFrame[-rowIndexVector,]
                break()
              }
            }
          }
        }
        if (Switch == FALSE) {
          if (!is.na(paramInfo$MARKER[i])){
            warning(paste("Unable to find",paramInfo$MARKER[i],"or",paramInfo$FLUOROPHORE[i],"in flow frame"))
          }
          else {
            warning(paste("Unable to find",paramInfo$FLUOROPHORE[i],"in flow frame"))
          }
        }
      }
    return(flowDataFrame)
  }
  
    parameter<-toupper(parameter)
  
    ## Iterate through the column names of the passed flow frame, looking for "parameter"
    Switch<-FALSE
    colNum<-ncol(flowDataFrame)
    columnNames<-toupper(colnames(flowDataFrame))
    
    for(colI in 1:colNum) {
      
      ## If a match is found
      if (columnNames[colI] == parameter) {
        
        Switch<-TRUE
  
        ## and if no upper/lower bound arguments were supplied
        if(is.null(upperBound) == TRUE & is.null(lowerBound) == TRUE) {
  
          ## remove that column 
          flowDataFrame<-flowDataFrame[-colI]
          break()
        }
        
        else {
  
          rowCount<-nrow(flowDataFrame[colI])
          colValues<-as.vector(flowDataFrame[,colI])
          rowIndexVector<-NULL
          
          ## If an upperbound and lowerbound argument were passed
          if(is.null(upperBound) == FALSE & is.null(lowerBound) == FALSE) {
            
            cond<-c(colValues > upperBound | colValues < lowerBound)
  
            ## For each element in that column of the flow frame
            for(rowI in 1:rowCount){
              
              ## if the element value is above the upper or below the lower bounds, 
              ## add the row index of that value (cell) to a vector
              if(cond[rowI]){
                rowIndexVector<-c(rowIndexVector, rowI)
              }
            }
            
            ## Remove the cells matching the row indices from the flow frame
            if(!is.null(rowIndexVector)) {
              flowDataFrame<-flowDataFrame[-rowIndexVector,]
              break()
            }
          }
          
          else {
  
            if(is.null(upperBound) == FALSE) {
                
                cond<-c(colValues > upperBound)
                
                for(rowI in 1:rowCount){
                  if(cond[rowI]){
                    rowIndexVector<-c(rowIndexVector, rowI)
                  }
                }
                if(!is.null(rowIndexVector)) {
                  flowDataFrame<-flowDataFrame[-rowIndexVector,]
                  break()
                }
              }
  
            if(is.null(lowerBound) == FALSE) {
              
              cond<-c(colValues < lowerBound)
              
              for(rowI in 1:rowCount){
                if(cond[rowI]){
                  rowIndexVector<-c(rowIndexVector, rowI)
                }
              }
              if(!is.null(rowIndexVector)) {
                flowDataFrame<-flowDataFrame[-rowIndexVector,]
                break()
              }
            }
          }
        }
      }
    }
    if (Switch == FALSE) {
      stop(paste(as.character(parameter), "parameter not found"))
    }
    return(flowDataFrame)
  }
  
  if(class(flowDataFrameOrList) == "data.frame") {
    return(flowFrame.Prune(flowDataFrameOrList, parameter, upperBound, lowerBound, fromTable))
  }
  
  
  if(class(flowDataFrameOrList) == "list") {
    flowList<-as.list(NULL)
    for(i in 1:length(flowDataFrameOrList)) {
      flowList[[i]]<-flowFrame.Prune(flowDataFrameOrList[[i]], parameter, upperBound, lowerBound, fromTable)
      names(flowList)[[i]]<-names(flowDataFrameOrList)[[i]]
    }
    return(flowList)
  }
}
